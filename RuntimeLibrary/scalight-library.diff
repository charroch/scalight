diff --git a/src/library/scala/Product.scala b/src/library/scala/Product.scala
index 1459ab9..03d7710 100644
--- a/src/library/scala/Product.scala
+++ b/src/library/scala/Product.scala
@@ -35,11 +35,12 @@ trait Product extends Any with Equals {
   /** An iterator over all the elements of this product.
    *  @return     in the default implementation, an `Iterator[Any]`
    */
-  def productIterator: Iterator[Any] = new collection.AbstractIterator[Any] {
+  def productIterator: java.util.Iterator[Any] = new java.util.Iterator[Any] {
     private var c: Int = 0
     private val cmax = productArity
     def hasNext = c < cmax
     def next() = { val result = productElement(c); c += 1; result }
+    def remove = ???
   }
 
   /** A string used in the `toString` methods of derived classes.
diff --git a/src/library/scala/reflect/api/Trees.scala b/src/library/scala/reflect/api/Trees.scala
index ca4e60f..9757d46 100644
--- a/src/library/scala/reflect/api/Trees.scala
+++ b/src/library/scala/reflect/api/Trees.scala
@@ -7,6 +7,7 @@ package scala.reflect
 package api
 
 import scala.collection.mutable.ListBuffer
+import collection.JavaConversions._
 
 // Syncnote: Trees are currently not thread-safe.
 trait Trees { self: Universe =>
diff --git a/src/library/scala/runtime/ScalaRunTime.scala b/src/library/scala/runtime/ScalaRunTime.scala
index 4c5e0e4..f80e9a9 100644
--- a/src/library/scala/runtime/ScalaRunTime.scala
+++ b/src/library/scala/runtime/ScalaRunTime.scala
@@ -8,12 +8,7 @@
 
 package scala.runtime
 
-import scala.collection.{ Seq, IndexedSeq, TraversableView, AbstractIterator }
-import scala.collection.mutable.WrappedArray
-import scala.collection.immutable.{ StringLike, NumericRange, List, Stream, Nil, :: }
-import scala.collection.generic.{ Sorted }
 import scala.util.control.ControlThrowable
-import scala.xml.{ Node, MetaData }
 
 import java.lang.Double.doubleToLongBits
 import java.lang.reflect.{ Modifier, Method => JMethod }
@@ -31,7 +26,7 @@ object ScalaRunTime {
     clazz.isArray && (atLevel == 1 || isArrayClass(clazz.getComponentType, atLevel - 1))
 
   def isValueClass(clazz: Class[_]) = clazz.isPrimitive()
-  def isTuple(x: Any) = x != null && tupleNames(x.getClass.getName)
+  def isTuple(x: Any) = x != null && tupleNames.contains(x.getClass.getName)
   def isAnyVal(x: Any) = x match {
     case _: Byte | _: Short | _: Char | _: Int | _: Long | _: Float | _: Double | _: Boolean | _: Unit => true
     case _                                                                                             => false
@@ -39,12 +34,12 @@ object ScalaRunTime {
   // Avoiding boxing which messes up the specialized tests.  Don't ask.
   private val tupleNames = {
     var i = 22
-    var names: List[String] = Nil
+    var names = new java.util.HashSet[String]()
     while (i >= 1) {
-      names ::= ("scala.Tuple" + String.valueOf(i))
+      names.add("scala.Tuple" + String.valueOf(i))
       i -= 1
     }
-    names.toSet
+    names
   }
 
   /** Return the class object representing an array with element class `clazz`.
@@ -196,14 +191,44 @@ object ScalaRunTime {
     }
   }
 
-  def _toString(x: Product): String =
-    x.productIterator.mkString(x.productPrefix + "(", ",", ")")
+  def mkString(it: java.util.Iterator[_], prefix: String, sep: String, suffix: String): String =
+    mkString(it, prefix, sep, suffix, -1, null)
+  def mkString(it: java.util.Iterator[_], prefix: String, sep: String, suffix: String, maxElements: Int, f: Any => String): String = {
+    val b = new StringBuilder(prefix)
+    var i = 0
+    while (it.hasNext && (maxElements < 0 || i < maxElements)) {
+      val v = it.next
+      b.append(if (f == null) v else f(v))
+      if (it.hasNext)
+        b.append(sep)
+    }
+    b.append(suffix)
+    b.toString
+  }
+  def mkString(it: Array[_], prefix: String, sep: String, suffix: String): String =
+    mkString(it, prefix, sep, suffix, -1, null)
+  def mkString(it: Array[_], prefix: String, sep: String, suffix: String, maxElements: Int, f: Any => String): String = {
+    val b = new StringBuilder(prefix)
+    var i = 0
+    val n = it.length
+    while (i < n && (maxElements < 0 || i < maxElements)) {
+      if (i != 0)
+        b.append(sep)
+      val v = it(i)
+      b.append(if (f == null) v else f(v))
+      i += 1
+    }
+    b.append(suffix)
+    b.toString
+  }
+  def _toString(x: Product): String = 
+    mkString(x.productIterator, x.productPrefix + "(", ",", ")")
 
   def _hashCode(x: Product): Int = scala.util.MurmurHash3.productHash(x)
 
   /** A helper for case classes. */
-  def typedProductIterator[T](x: Product): Iterator[T] = {
-    new AbstractIterator[T] {
+  def typedProductIterator[T](x: Product): java.util.Iterator[T] = {
+    new java.util.Iterator[T] {
       private var c: Int = 0
       private val cmax = x.productArity
       def hasNext = c < cmax
@@ -212,6 +237,7 @@ object ScalaRunTime {
         c += 1
         result.asInstanceOf[T]
       }
+      def remove = ???
     }
   }
 
@@ -225,7 +251,7 @@ object ScalaRunTime {
     else x.equals(y)
 
   def _equals(x: Product, y: Any): Boolean = y match {
-    case y: Product if x.productArity == y.productArity => x.productIterator sameElements y.productIterator
+    case y: Product if x.productArity == y.productArity => sameElements(x.productIterator, y.productIterator)
     case _                                              => false
   }
 
@@ -280,6 +306,21 @@ object ScalaRunTime {
    *  See ticket #2867 for specifics.
    */
   def sameElements(xs1: collection.Seq[Any], xs2: collection.Seq[Any]) = xs1 sameElements xs2
+  
+  def map(xs: java.util.Iterator[Any], f: Any => Any): java.util.Iterator[Any] = { 
+    new java.util.Iterator[Any] {
+      def hasNext = xs.hasNext
+      def next = f(xs.next)
+      def remove = ???
+    }
+  }
+  def sameElements(xs1: java.util.Iterator[Any], xs2: java.util.Iterator[Any]): Boolean = { 
+    while (xs1.hasNext && xs2.hasNext)
+      if (xs1.next != xs2.next)
+        return false
+
+    !xs1.hasNext && !xs2.hasNext
+  }
 
   /** Given any Scala value, convert it to a String.
    *
@@ -305,19 +346,19 @@ object ScalaRunTime {
     // When doing our own iteration is dangerous
     def useOwnToString(x: Any) = x match {
       // Node extends NodeSeq extends Seq[Node] and MetaData extends Iterable[MetaData]
-      case _: Node | _: MetaData => true
+      //case _: Node | _: MetaData => true
       // Range/NumericRange have a custom toString to avoid walking a gazillion elements
-      case _: Range | _: NumericRange[_] => true
+      //case _: Range | _: NumericRange[_] => true
       // Sorted collections to the wrong thing (for us) on iteration - ticket #3493
-      case _: Sorted[_, _]  => true
+      //case _: Sorted[_, _]  => true
       // StringBuilder(a, b, c) and similar not so attractive
-      case _: StringLike[_] => true
+      //case _: StringLike[_] => true
       // Don't want to evaluate any elements in a view
-      case _: TraversableView[_, _] => true
+      //case _: TraversableView[_, _] => true
       // Don't want to a) traverse infinity or b) be overly helpful with peoples' custom
       // collections which may have useful toString methods - ticket #3710
       // or c) print AbstractFiles which are somehow also Iterable[AbstractFile]s.
-      case x: Traversable[_] => !x.hasDefiniteSize || !isScalaClass(x) || isScalaCompilerClass(x)
+      //case x: Traversable[_] => !x.hasDefiniteSize || !isScalaClass(x) || isScalaCompilerClass(x)
       // Otherwise, nothing could possibly go wrong
       case _ => false
     }
@@ -333,7 +374,7 @@ object ScalaRunTime {
       if (x.getClass.getComponentType == classOf[BoxedUnit])
         0 until (array_length(x) min maxElements) map (_ => "()") mkString ("Array(", ", ", ")")
       else
-        WrappedArray make x take maxElements map inner mkString ("Array(", ", ", ")")
+        mkString(x.asInstanceOf[Array[_]], "Array(", ", ", ")", maxElements, inner(_))
     }
 
     // The recursively applied attempt to prettify Array printing.
@@ -346,11 +387,11 @@ object ScalaRunTime {
       case x: String                    => if (x.head.isWhitespace || x.last.isWhitespace) "\"" + x + "\"" else x
       case x if useOwnToString(x)       => x.toString
       case x: AnyRef if isArray(x)      => arrayToString(x)
-      case x: collection.Map[_, _]      => x.iterator take maxElements map mapInner mkString (x.stringPrefix + "(", ", ", ")")
-      case x: Iterable[_]               => x.iterator take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
-      case x: Traversable[_]            => x take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
+      //case x: collection.Map[_, _]      => x.iterator take maxElements map mapInner mkString (x.stringPrefix + "(", ", ", ")")
+      case x: java.lang.Iterable[_]               => mkString(x.iterator, x.getClass.getSimpleName/*stringPrefix*/ + "(", ", ", ")", maxElements, inner(_))
+      //case x: Traversable[_]            => x take maxElements map inner mkString (x.stringPrefix + "(", ", ", ")")
       case x: Product1[_] if isTuple(x) => "(" + inner(x._1) + ",)" // that special trailing comma
-      case x: Product if isTuple(x)     => x.productIterator map inner mkString ("(", ",", ")")
+      case x: Product if isTuple(x)     => mkString(map(x.productIterator, inner(_)), "(", ",", ")")
       case x                            => x.toString
     }
 
@@ -369,6 +410,7 @@ object ScalaRunTime {
 
     nl + s + "\n"
   }
+  /*
   private[scala] def checkZip(what: String, coll1: TraversableOnce[_], coll2: TraversableOnce[_]) {
     if (sys.props contains "scala.debug.zip") {
       val xs = coll1.toIndexedSeq
@@ -383,4 +425,5 @@ object ScalaRunTime {
       }
     }
   }
+  */
 }
